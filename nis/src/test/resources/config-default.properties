# Common configuration
# Short server name (will appear as name for the lock file - example: Nis.lock)
nem.shortServerName = Nis

# In order to be able to start the NEM software (NIS and also NCC) from a removeable media (e.g. USB drive),
# the path, where the database, logs and other files will be saved, can be configured.
# %h - is the home directory of the user (also if the entry is missing) (example: nem.folder = %h/nem)
# . - is the working directory (example: nem.folder = ./nem)
nem.folder = %h/nem

# Specifies the maximum number of threads of the thread pool - default is: 500
# NIS runs more than one thread to be responsive to more than one request at a time.
# The higher this value, the more requests can be answered by NIS at the same time,
# but higher values will increase the system requirements (CPU and memory).
nem.maxThreads = 500

# protocol, host, ports, paths
nem.protocol = http
nem.host = 127.0.0.1
nem.httpPort = 7890
nem.httpsPort = 7891
nem.websocketPort = 7778
nem.webContext =
nem.apiContext =
nem.homePath =
nem.shutdownPath = /shutdown

# Indicates whether or not this node should use a DOS filter
nem.useDosFilter = true

# List of APIs that should not be audited (pipe-separated)
nem.nonAuditedApiPaths = /heartbeat|/status|/chain/height|/chain/score|/chain/last-block|/chain/hashes-from|/push/transaction|/node/ping|/node/info|/node/extended-info|/node/peer-list/active|/account/get|/account/status|/account/unconfirmedTransactions|/account/transfers/all|/account/get/batch

# Denotes the name of the network to join. Available are:
# testnet - the test network that uses test coins and where new features are tested before they are released to the main network.
# mainnet - the main network that uses real coins.
nem.network = mainnet

# Indicates whether or not this node should automatically boot even if no boot information is available.
nis.shouldAutoBoot = true

# NIS auto boot configuration
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
# nis.bootKey: private key of an account that should be used to boot NIS
# nis.bootName: name of the NIS node (you can use anything you like)
#nis.bootKey = #0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
#nis.bootName = foobar

# Indicates whether or not this node should automatically start harvesting on boot.
nis.shouldAutoHarvestOnBoot = true

# Additional private keys that should automatically start harvesting on boot (pipe-separated).
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
nis.additionalHarvesterPrivateKeys =

# The number of regular nodes that this node should communicate with during broadcasts - default is: 5
nis.nodeLimit = 5

# The number of regular nodes that this node should communicate with during time synchronization - default is: 20
nis.timeSyncNodeLimit = 20

# Indicates whether or not this node should send binary payloads.
# Sending binary data instead of JSON data makes requests/responses shorter and thus communication faster.
nis.useBinaryTransport = true

# Indicates if the network time should be used for timestamps - if set to 'false', local system time is used
nis.useNetworkTime = true

# Indicates if transaction fees should be ignored which means that a transaction will pass validation even if it has zero fee.
#Zero fees for transaction can be desirable in a private network. Default is: false
nis.ignoreFees = false

# Indicates the automatic IP detection mode:
# - AutoRequired - automatic IP detection is enabled and is required to succeed in order for this node to boot
# - AutoOptional - automatic IP detection is enabled but is not required to succeed in order for this node to boot
# - Disabled - automatic IP detection is disabled
nis.ipDetectionMode = AutoRequired

# Maximum number of unlocked accounts. Meaning: maximum number of accounts that are allowed to use this NIS for harvesting
# Keep the value within a reasonable range, a too large value an cause problems for all harvesting accounts.
nis.unlockedLimit = 4

# Account addresses that are allowed to use this NIS for harvesting (pipe-separated)
# Leave this empty, if you don't want to set any restrictions.
nis.allowedHarvesterAddresses =

# Maximum number of transactions that other nodes should return in the block list returned from /chain/blocks-after - default is: 10000
nis.maxTransactions = 10000

# Maximum number of transactions in a block - default is: 120
nis.maxTransactionsPerBlock = 120

# The targeted time between two blocks in seconds - default is: 60
nis.blockGenerationTargetTime = 60

# The maximum depth of a fork that can be automatically resolved - default is: 360
nis.blockChainRewriteLimit = 360

# List of trusted IP addresses (pipe-separated). Requests from these addresses are treated as local requests.
# NIS usually checks if a request comes from the local machine and if not, certain requests get rejected
# (requests involving the private key). These requests will not get rejected, if they come from an IP in this list.
# valid forms are:
# fully qualified ip: 127.0.0.1, 0:0:0:0:0:0:0:1
# host name: bob.nem.ninja
# partial wildcard ip: 127.0.0.*, 0:0:0:0:0:0:0:*
nis.additionalLocalIps =

# The number of hours to keep the hashes of transactions in memory (-1 = keep forever, 36 is the minimum)
# If transaction hashes are in memory, it is possible to query transactions by hash.
nis.transactionHashRetentionTime = 36

# Optional features supported by the local node (pipe-separated).
# TRANSACTION_HASH_LOOKUP: transactions can be retrieved by supplying the transaction hash.
# HISTORICAL_ACCOUNT_DATA: historical account data can be retrieved.
nis.optionalFeatures = TRANSACTION_HASH_LOOKUP

# Configures the features the block chain should use (pipe-separated).
# 1) Consensus algorithm: the algorithms are mutually exclusive.
# PROOF_OF_IMPORTANCE: block chain will use proof of importance consensus algorithm.
# PROOF_OF_STAKE: block chain will use a simple proof of stake consensus algorithm.
# 2) Weighted balance scheme: the schemes are mutually exclusive.
# WB_TIME_BASED_VESTING: block chain uses a time-based vesting of balances.
# WB_IMMEDIATE_VESTING: block chain immediately vests all balances.
#                       This is only recommended for an environment where the participating
#                       nodes can be trusted, i.e. a private network.
# 3) other:
# STABILIZE_BLOCK_TIMES: stablizes gaps between blocks
nis.blockChainFeatures = PROOF_OF_IMPORTANCE|WB_TIME_BASED_VESTING

# Indicates whether or not the block loading should be delayed.
# If 'true' NIS will be ready to serve (meaning a NCC can connect to NIS) before the blocks are loaded.
# VPSes which run only a standalone NIS will probably not want to delay.
# Users running both NIS and NCC with GUI will probably want to delay.
nis.delayBlockLoading = true

# Height of the fork at which to reissue the treasury.
nis.treasuryReissuanceForkHeight = 3481580

# Hashes of transactions that are allowed in the treasury reissuance fork block (preferred).
nis.treasuryReissuanceForkTransactionHashes = 1EBF9E2236D3B41468773F639C438891AE8BE15B8CEA38DBA9F7DDC00AEB48D2|\
E2B7A70CA4DC369572168555DBC7A272D6DD951659915D9059D06FE21124CB6A|\
A75E84DCE0FC68EF1E8A8930D9034408B4B0093C9A93D3EEBFDC1A2018EF3333|\
4ACE7A501DF3F3C3A9B40D648118FFF2F4231E60D498721892917DB56105CC6C|\
C36848B395C6BB8D4F9BA5CD5443095E321B9A1EBEEC7503FB53B20C74DE430B|\
04B0645E262D39E567A25B1C149CA628D9C25162F074B4505168120FF17210A7|\
2B09D8F144745765BE4F912CF11596637528587AF9B9AB32E4F218724E6682B5|\
E6D6107E6F43AB1BAD34CC91EBDB18AE48525387570BB86DD29500241936FC3E|\
7DCA32BEC6A784F9A7A6D81B393791F1ECE37EAC766C410ED0701A2CE42AD6FC|\
B25304EF316305B0A8C804CD29BC6A32D90435E77D5A1C1ACAA46FE8E0E91715|\
64E86B57957618A1F432664EA9489213434600C626A3E5C9A3B38DF92B47FF4B|\
0EBBD73A3EEA380BBAB0BE5BF338565980400439BA515776D4D575544E5D1228|\
FF3B86BC857DB57C54402D270441F96B8187167DB6EEB296C41EC673790DD026|\
AFE5235EF7F3BC7DF38981207DFFBF9C3A82C793EAE966C1930EBAEE2F66C7A7|\
79DA597BB8175A008F606B0511AFA100FD6BACB7FD545F5109811B025A2DFB69|\
77026E0C2898536E0011ACFD575B6E79C80A8290AB74E5D8AC99B3DB551A6FFC|\
90217605B2E154B3B6B05219B09486BC7E11A8A028FFD29894AC24EFFDA80815|\
E27D6574C8FCF710241332DE7AF4201FFDBD369D8E850F073848BE15F5774A38|\
C6ABA90D62B6DA0C4562C7760F3FB059ADB0B1E66C9D148FD500B5211CD3F5B9|\
8AFFDB2BA2151C350ED8DFAF20E6A067EDC817BD87DCF3F12189182EC7131282|\
D662C564628E3FEA447B8CA7CE0601BBD6B808C318C528A1B71FC93D65B482AF|\
F6DFDFA9920F69DB8E929EB1378A5B1318360CA1442ED69E9443DE3E6014A4FE|\
478BAB6750B8FA2EA455FB5D468E46572DBA618A8A264A2A5887BEEB2D6E5483|\
12E1652135EFAF9A4663C8A87DD1E721C42DBCCC9F8D7AF07436F1B64FE43227|\
AA51F4C2C01092641866A9644BC34B9FECFE11B9B0D826942421E0C3D058FA35|\
E8D2D1BDD98D5822C26C276CA36E67EA2502E10B02274D2F87328BA443D7C5EF|\
BF1436DBEC747EFA25B075BDD5154C4C71ADE9C149AD268E2CF17233DCE8B1C6|\
A61100B42C4A5879CD64E2D70CF38786DCFBB745202D9F6AE0187F7C7058FFE3|\
1F5B5FC0A0DE7830B8752736CC2544BDA9C750B0E92E1F5EA919F59013C1DC50|\
B684D50F0B6252E096E264B9964AE32B19D6971268E4EC410DE98C31E977AE3C|\
388BC51AABA66FE0D0A552DB4F8F384CD2A2C7BD4D7A6AF49A8248F629FFC8C9|\
0AB8FED6646998BA6F1A6A8AE987905096C7C11CC28DB99B10ADE37FBC49329F|\
512CD894439B9C97DF5372295404C73CF0FC20B751AA169ECA9EDF6D41CBCAC3|\
DB754D48A8BF81E1EF6CBE96964BBE6B8898699F5D220D40BACC3B1AFF7F2677|\
01DDFEFDE0D8A3D4ADD0A80974700CAFF129916324C7803F4256FC64B29E5BAE|\
C978EBA95A25FBD8C053FB3077953CC9A187C81FBE991BAEEBF5EF8C1BE22CA3|\
CEB5ACCDAD1674E875A8DDA3D88C15034D3A74A5980C0CE03B1BA7F0F39439F1|\
26A0E19CA2818222D9FEBBB89CA4DB1EC998AC4BFD8D9551E0406635EDC3082D|\
E445F3286B0C34AA0FEA65BA0279696A8332C7196E7A76181E781BFAEBC7A900|\
8D673BBF81BAE48DCA7CBD83FB00A84EB07605479F65CE4FC104FC1395741767|\
196AADF67FA2E3BD87FAF51825016A371333F33EBFB77CABC3CA004E785DEA3D|\
EF4C8B2249A80BD1F2A773B492B5328EA15C7F969CE53426A5BD6ECDE240CF1D|\
7521FBAB72246E6D8AA832AEFFD2AECF7743D1DCF85B3D51068DC9106BFAAAB8|\
11B2B982C5947E1E4831B35B1C7A29C1AFD1D11EBA47C71AC400B0AEDF8BD887|\
3A056C780F06B83D229579D3FFA965E788897FF41305DF176DF7BE999972B2DD|\
3A5086CC1C414CA744419931B08A11C6173206CBEF5E50E8B3BAA45DC2A89BCB|\
E516A4A58AC21333EB0ECB5E08AC671FAB2E56C174940122A7192A506FCC0D30|\
085B20E778355DDFB20B8D263A476E5C3E1EC373E0D7A7A6E6C31E99DD016031|\
0A0039F85B6581A003F81EE54B6F1B41EBFF6727DF76A5E0CED2E51719A217D2|\
BDEF43D8B361690ADD69D740B57D21038369DA8A88B3A9E402FC5662E45EF082|\
3CFB66A96FB19095C8AB66C25197926DB2403EABD800E4337CA1DB67DA50287B|\
D74D39BAE30E97BF76FBD82438154C93AF9DA44EB9C1CEA56410B2671698D649

# Hashes of transactions that are allowed in the treasury reissuance fork block (fallback).
nis.treasuryReissuanceForkFallbackTransactionHashes = 2AC17CB342D2EC97F1FAAB5FDF9409C54CD2DD69D0FB28BBD80ADB58A993C1DF
