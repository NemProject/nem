# Common configuration
# Short server name (will appear as name for the lock file - example: Nis.lock)
nem.shortServerName = Nis

# In order to be able to start the NEM software (NIS and also NCC) from a removeable media (e.g. USB drive),
# the path, where the database, logs and other files will be saved, can be configured.
# %h - is the home directory of the user (also if the entry is missing) (example: nem.folder = %h/nem)
# . - is the working directory (example: nem.folder = ./nem)
nem.folder = %h/nem

# Specifies the maximum number of threads of the thread pool - default is: 500
# NIS runs more than one thread to be responsive to more than one request at a time.
# The higher this value, the more requests can be answered by NIS at the same time,
# but higher values will increase the system requirements (CPU and memory).
nem.maxThreads = 500

# protocol, host, ports, paths
nem.protocol = http
nem.host = 127.0.0.1
nem.httpPort = 7890
nem.httpsPort = 7891
nem.websocketPort = 7778
nem.webContext =
nem.apiContext =
nem.homePath =
nem.shutdownPath = /shutdown

# Indicates whether or not this node should use a DOS filter
nem.useDosFilter = true

# List of APIs that should not be audited (pipe-separated)
nem.nonAuditedApiPaths = /heartbeat|/status|/chain/height|/chain/score|/chain/last-block|/chain/hashes-from|/push/transaction|/node/ping|/node/info|/node/extended-info|/node/peer-list/active|/account/get|/account/status|/account/unconfirmedTransactions|/account/transfers/all|/account/get/batch

# Denotes the name of the network to join. Available are:
# testnet - the test network that uses test coins and where new features are tested before they are released to the main network.
# mainnet - the main network that uses real coins.
nem.network = mainnet

# Indicates whether or not this node should automatically boot even if no boot information is available.
nis.shouldAutoBoot = true

# NIS auto boot configuration
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
# nis.bootKey: private key of an account that should be used to boot NIS
# nis.bootName: name of the NIS node (you can use anything you like)
#nis.bootKey = #0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
#nis.bootName = foobar

# Indicates whether or not this node should automatically start harvesting on boot.
nis.shouldAutoHarvestOnBoot = true

# Additional private keys that should automatically start harvesting on boot (pipe-separated).
# CAUTION: Keep in mind that if someone will read key placed here, he might STEAL your XEM
nis.additionalHarvesterPrivateKeys =

# The number of regular nodes that this node should communicate with during broadcasts - default is: 5
nis.nodeLimit = 5

# The number of regular nodes that this node should communicate with during time synchronization - default is: 20
nis.timeSyncNodeLimit = 20

# Indicates whether or not this node should send binary payloads.
# Sending binary data instead of JSON data makes requests/responses shorter and thus communication faster.
nis.useBinaryTransport = true

# Indicates if the network time should be used for timestamps - if set to 'false', local system time is used
nis.useNetworkTime = true

# Indicates if transaction fees should be ignored which means that a transaction will pass validation even if it has zero fee.
#Zero fees for transaction can be desirable in a private network. Default is: false
nis.ignoreFees = false

# Indicates the automatic IP detection mode:
# - AutoRequired - automatic IP detection is enabled and is required to succeed in order for this node to boot
# - AutoOptional - automatic IP detection is enabled but is not required to succeed in order for this node to boot
# - Disabled - automatic IP detection is disabled
nis.ipDetectionMode = AutoRequired

# Maximum number of unlocked accounts. Meaning: maximum number of accounts that are allowed to use this NIS for harvesting
# Keep the value within a reasonable range, a too large value an cause problems for all harvesting accounts.
nis.unlockedLimit = 4

# Account addresses that are allowed to use this NIS for harvesting (pipe-separated)
# Leave this empty, if you don't want to set any restrictions.
nis.allowedHarvesterAddresses =

# Maximum number of transactions that other nodes should return in the block list returned from /chain/blocks-after - default is: 10000
nis.maxTransactions = 10000

# Maximum number of transactions in a block - default is: 120
nis.maxTransactionsPerBlock = 120

# The targeted time between two blocks in seconds - default is: 60
nis.blockGenerationTargetTime = 60

# The maximum depth of a fork that can be automatically resolved - default is: 360
nis.blockChainRewriteLimit = 360

# List of trusted IP addresses (pipe-separated). Requests from these addresses are treated as local requests.
# NIS usually checks if a request comes from the local machine and if not, certain requests get rejected
# (requests involving the private key). These requests will not get rejected, if they come from an IP in this list.
# valid forms are:
# fully qualified ip: 127.0.0.1, 0:0:0:0:0:0:0:1
# host name: bob.nem.ninja
# partial wildcard ip: 127.0.0.*, 0:0:0:0:0:0:0:*
nis.additionalLocalIps =

# The number of hours to keep the hashes of transactions in memory (-1 = keep forever, 36 is the minimum)
# If transaction hashes are in memory, it is possible to query transactions by hash.
nis.transactionHashRetentionTime = 36

# Optional features supported by the local node (pipe-separated).
# TRANSACTION_HASH_LOOKUP: transactions can be retrieved by supplying the transaction hash.
# HISTORICAL_ACCOUNT_DATA: historical account data can be retrieved.
nis.optionalFeatures = TRANSACTION_HASH_LOOKUP

# Configures the features the block chain should use (pipe-separated).
# 1) Consensus algorithm: the algorithms are mutually exclusive.
# PROOF_OF_IMPORTANCE: block chain will use proof of importance consensus algorithm.
# PROOF_OF_STAKE: block chain will use a simple proof of stake consensus algorithm.
# 2) Weighted balance scheme: the schemes are mutually exclusive.
# WB_TIME_BASED_VESTING: block chain uses a time-based vesting of balances.
# WB_IMMEDIATE_VESTING: block chain immediately vests all balances.
#                       This is only recommended for an environment where the participating
#                       nodes can be trusted, i.e. a private network.
# 3) other:
# STABILIZE_BLOCK_TIMES: stablizes gaps between blocks
nis.blockChainFeatures = PROOF_OF_IMPORTANCE|WB_TIME_BASED_VESTING

# Indicates whether or not the block loading should be delayed.
# If 'true' NIS will be ready to serve (meaning a NCC can connect to NIS) before the blocks are loaded.
# VPSes which run only a standalone NIS will probably not want to delay.
# Users running both NIS and NCC with GUI will probably want to delay.
nis.delayBlockLoading = true

# Height of the fork at which to reissue the treasury.
nis.treasuryReissuanceForkHeight = 3464800

# Hashes of transactions that are allowed in the treasury reissuance fork block (preferred).
nis.treasuryReissuanceForkTransactionHashes = 3E3BB1706738D854083BDC98BAB03ED648D2B8E4F9227A0F103D88C49ACA1A78\
|0F592CF4A2A6B3908F37FD7948C864113FEAC5167DA93245CFB38B112802AE31\
|02351066525BB0635B1BEDFBF20A69CCF2FA5FAE4CFA9C170B0F9F6EECEE189C\
|0CFD2EB6B72BC5E18E04CCA26D796FE0D86EAF48A34B0884C9AE3ADD5A2AB510\
|C90FBC9A27688FB26372CED70904F819B76C0CDEBE592236429E796753E42D20\
|6CBE174795355E7ED5FCA1C097F1557048516A6CCFDB413A76CCA90FED820239\
|3363C503BD4CA0AFE787DD33D925CCEE3BC9BF773E04221561A0BAD140806E9E\
|4679F4BCD56547AA554717D6DCAD3B380AB0718BF986358626D5EDB2BAD8E7F3\
|3E48B195E09B3C2A6F8BDB82D3A565C075FA56BB0C26BD783D67912E2F4254A1\
|98DD719799305197C82F19F26B84F28386A42A128C165AA2DFB08B2B9421A046\
|4F98FEF1AA79EF87C94730E44FAB835963D1063538203DBA2C3460BC235E0D42\
|DE0C6925B1240E2E2766E916930BBD0C23C8E23AEA61BC80DAD56DED50B1471D\
|A4E2796B27B1D94FB6760BAE07C8782FDA958E93483C408A17117EC66A232F25\
|EFAA48DFF5FAA947520D8A931C492C0C6AFCEFC95C3D2437627B6F53FF246618\
|628CA7420A4B4D803388D2CC547E9562A5476951A0A227164D5D07C1CCBE56C0\
|869D456536632251C44784850D7F9F5EC869B980125706B27B015ED8EC469A9F\
|FA93016035829E5DE7470EB4F52CB1A45F3F049BA3FBD1379904BFBD735C60A8\
|E3565D40BC4CF0607AB400DB8E873B8A795ADC568672121D87388D395F85096E\
|3451817039A9FAE741DDE83775B0A6E0476DAB335E030E8FD702B33557518613\
|862855BC9C9CCC4A47D9B03A221FE5946039B55F3B86461D52835F88C37440A4\
|984C38CAEF168BF88C45442F8F9D9EC1024CFBEAA50E45F98792F92CDEA045BA\
|01917E5CAF3A7D2BA7A1B565781FDF7CCB79E914BB37E437A3D1F3E3574EFAAA\
|2FECE9EDC7A0D7BBA29F8B925DB3412DDFDEFB66061C47EE1F6886D12246E509\
|299145DCAEDD03BAF0234157CDA7A5DBBA49E6246027A1DB031E05E0926AFF21\
|588C1E492036A3F076581C8453F03F8AE0F7E94B1950AB0F3C037E7709DE9D69\
|740DB37F62519FB3F83DE07E6AA6AB23C87E89588D91C96846F37F46E019EF5C\
|BED0EA9D9573904A0D57AA67AC45CB306525580ABDB47980A96529D5EC25E2CC\
|028001328758783AA0A62B243B3AC6B658FB5E1AF37EC274808B7CF78CE4A4C2\
|4FF6A7C9837E061CD143A36933EB0CFDA742254DB13661A3DEAC290390634828\
|2E4C541DD705EFD46C968CF95EC30F1A56F9FDFD96D849CB3B98B6EA46790070\
|DC92587384C38B8C1BB169E930AD7A03A2E57C68E17B738FC73055B1B6246EEC\
|A70AE300846748D237E8AAD4CFD7ED9FBCCF82847BA85508B45264D62AB5D917\
|EA48F88E3F53F176AE6EB56436268FDFCCDD6AA8633DAEB768CCC183314C2B96\
|F6C6B255F1053515A81820EF4E2E4998EBFC4462571344DA0B373FE9DDA450F8\
|C8EDD2201BC195C340E52C93F643413A6A4D0DC5D41023990AE88F9BAF807563\
|158114FBE2B5841657E076EAE6871E3C0C8C0619061A0709E2BFA478D74185B0\
|4496DF6E237F8C7B76339D305FF8A2EE42A38BCA97D8DF5711CEA2A2D5F9F64B\
|BA5BC6722B97FE30E1AAA02B344612164A5F187C32ADE6413CB7B882C45F83BE\
|3BC7E432D649FD1B79D22296CE1CA65B989B8C223A098885BA73014C86B9C5D1\
|4EF5F170030CFDEB6288926A32CC8D888E9356694462C8FA236C95916012480C\
|0A662ED45608C459BEAA5397EF335344DB15109AA0898FC47BFC0476CA8E3E1B\
|BD5F633D8F4E77A6F7DC40BB0130C763A5B8E3FB5ABBCD25C22190D0868C8760\
|D22972B85EA35D30FB39191CE2662836126D26E40EE5BC2A04692F54DD95270B\
|65554B8428A74F2990A7CC579B69F66A07CC2CFB16C79486A2D245D574AE92A5\
|C53699A1E92FE05C5D3275F471945F566FAF5C7DFDDEC996218E93EF1F5BE660\
|04560525D9A6642E18E23CB42814472EEE8A9E02594D9A552982CD44E3064C21\
|4D4362D92DBB41F5C17B7EE3965204CD08B510651CD84ABFED2051F4FDA86785\
|F42DDD0A9E9C4598532B5994C4EBAC5C57AB9C28065C6187C8E68BB550804242\
|2730571D02D5CA6D3DE900EE2D8C2C5FE84A28C1D01D8FFABBC56248DE115B56\
|F25F8530930997969E32E4CAF5B5E66B30003612DC43E6B702533D674880F0A6\
|A92B84D1C2C15A7352401BD942B6470E56F44F9FAAA3BA4732E36380989E186B\
|24688762D1E9026BC759303830BB4A486D5BD2DF4ADC95A2DDF6101CC4CCD50A\
|AFF3F7A8F78E27C95DA7F8842DC8E78FB7FFE9EA21B2C94F15EC3BDD8FEF1B8B

# Hashes of transactions that are allowed in the treasury reissuance fork block (fallback).
nis.treasuryReissuanceForkFallbackTransactionHashes = 047BF078A2CC8D38E89151D9190CE25ED41256E4D3520203AC30E60C69BEB325
